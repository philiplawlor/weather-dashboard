// Main JavaScript for Weather Dashboard
document.addEventListener('DOMContentLoaded', function() {
    // Initialize elements
    const weatherForm = document.getElementById('weatherForm');
    const cityInput = document.getElementById('cityInput');
    const currentWeather = document.getElementById('currentWeather');
    const forecastContainer = document.getElementById('forecastContainer');
    const errorMessage = document.getElementById('errorMessage');
    const weatherHistory = document.getElementById('weatherHistory');
    const noHistory = document.getElementById('noHistory');
    const loadingSpinner = document.getElementById('loadingSpinner');
    const forecastToggle = document.getElementById('forecastToggle');
    let currentLocation = '';

    // Load weather history on page load
    loadWeatherHistory();

    // Handle form submission
    if (weatherForm) {
        weatherForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const location = cityInput ? cityInput.value.trim() : '';
            
            if (!location) {
                showError('Please enter a city name or ZIP code');
                return;
            }
            
            fetchWeather(location);
        });
    }

    // Fetch weather data from the API
    async function fetchWeather(location) {
        showLoading(true);
        showError(''); // Clear any previous errors
        
        // Check if the input is a ZIP code (US only for now)
        const isZipCode = /^\d{5}(-\d{4})?$/.test(location);
        const endpoint = isZipCode ? 
            `/api/weather?zip=${encodeURIComponent(location)}` : 
            `/api/weather?city=${encodeURIComponent(location)}`;
        
        try {
            const response = await fetch(endpoint);
            const data = await response.json();
            
            if (!response.ok) {
                const errorMsg = data.message || 'Failed to fetch weather data';
                throw new Error(errorMsg);
            }
            
            if (data.status === 'success') {
                currentLocation = location;
                displayWeather(data.data);
                loadWeatherHistory(); // Reload history after new search
                
                // Fetch forecast data
                await fetchForecast(location, isZipCode);
            } else {
                throw new Error(data.message || 'Failed to process weather data');
            }
        } catch (error) {
            console.error('Error fetching weather:', error);
            showError(`Error: ${error.message || 'Failed to fetch weather data. Please try again.'}`);
        } finally {
            showLoading(false);
        }
    }
    
    // Fetch forecast data from the API
    async function fetchForecast(location, isZipCode) {
        if (!location) return;
        
        const endpoint = isZipCode ? 
            `/api/weather/forecast?zip=${encodeURIComponent(location)}` : 
            `/api/weather/forecast?city=${encodeURIComponent(location)}`;
            
        try {
            const response = await fetch(endpoint);
            const data = await response.json();
            
            if (response.ok && data.status === 'success') {
                displayForecast(data.data);
            } else {
                throw new Error(data.message || 'Failed to load forecast data');
            }
        } catch (error) {
            console.error('Error fetching forecast:', error);
            // Don't show error to user for forecast failures
        }
    }

    // Display weather data
    function displayWeather(data) {
        if (!data) return;
        
        // Update DOM elements
        document.getElementById('location').textContent = data.location || 'N/A';
        document.getElementById('temperature').innerHTML = data.temperature ? `${Math.round(data.temperature)}&deg;F` : 'N/A';
        document.getElementById('weatherDescription').textContent = data.description || 'N/A';
        document.getElementById('humidity').textContent = data.humidity ? `${data.humidity}%` : 'N/A';
        document.getElementById('feelsLike').textContent = data.temperature ? `${Math.round(data.temperature)}°F` : 'N/A';
        
        // Set weather icon if available
        const weatherIcon = document.getElementById('weatherIcon');
        if (weatherIcon && data.icon) {
            weatherIcon.src = `http://openweathermap.org/img/wn/${data.icon}@2x.png`;
            weatherIcon.alt = data.description || 'Weather icon';
            weatherIcon.style.display = 'block';
        } else if (weatherIcon) {
            weatherIcon.style.display = 'none';
        }

        // Show weather card and hide error
        if (currentWeather) currentWeather.classList.remove('d-none');
        if (errorMessage) errorMessage.classList.add('d-none');
        
        // Show forecast toggle
        if (forecastToggle) {
            forecastToggle.style.display = 'block';
            forecastToggle.setAttribute('aria-expanded', 'false');
        }
        
        // Hide forecast container by default
        if (forecastContainer) {
            forecastContainer.style.display = 'none';
        }
    }
    
    // Display 5-day forecast data
    function displayForecast(forecastData) {
        if (!forecastData || !forecastData.length || !forecastContainer) return;
        
        // Clear previous forecast
        forecastContainer.innerHTML = '';
        
        // Create forecast header
        const forecastHeader = document.createElement('h4');
        forecastHeader.className = 'mt-4 mb-3';
        forecastHeader.textContent = '5-Day Forecast';
        forecastContainer.appendChild(forecastHeader);
        
        // Create forecast row
        const row = document.createElement('div');
        row.className = 'row g-3';
        
        // Process each day's forecast
        forecastData.forEach(day => {
            const date = new Date(day.date);
            const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
            const monthDay = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
            
            const col = document.createElement('div');
            col.className = 'col-6 col-md-4 col-lg-2 mb-3';
            
            col.innerHTML = `
                <div class="card h-100">
                    <div class="card-body text-center">
                        <h5 class="card-title">${dayName}</h5>
                        <p class="text-muted small mb-2">${monthDay}</p>
                        ${day.icon ? `
                            <img src="http://openweathermap.org/img/wn/${day.icon}@2x.png" 
                                 alt="${day.description || ''}" 
                                 class="img-fluid mb-2" 
                                 style="width: 60px; height: 60px;">
                        ` : ''}
                        <p class="mb-1">${day.description || ''}</p>
                        <div class="d-flex justify-content-around mt-2">
                            <div>
                                <span class="h5 text-primary">${Math.round(day.temp_max)}°</span>
                                <small class="text-muted d-block">High</small>
                            </div>
                            <div>
                                <span class="h5 text-secondary">${Math.round(day.temp_min)}°</span>
                                <small class="text-muted d-block">Low</small>
                            </div>
                        </div>
                        <div class="mt-2">
                            <i class="bi bi-droplet"></i> ${day.humidity}%
                        </div>
                    </div>
                </div>`;
            
            row.appendChild(col);
        });
        
        forecastContainer.appendChild(row);
    }
    
    // Toggle forecast visibility
    if (forecastToggle && forecastContainer) {
        forecastToggle.addEventListener('click', function() {
            const isExpanded = this.getAttribute('aria-expanded') === 'true';
            forecastContainer.style.display = isExpanded ? 'none' : 'block';
            this.setAttribute('aria-expanded', String(!isExpanded));
            this.querySelector('span').textContent = isExpanded ? 'Show' : 'Hide';
            this.querySelector('i').className = isExpanded ? 'bi bi-chevron-down' : 'bi bi-chevron-up';
            
            // If showing forecast and it's empty, try to load it
            if (!isExpanded && currentLocation && forecastContainer.children.length === 0) {
                const isZipCode = /^\d{5}(-\d{4})?$/.test(currentLocation);
                fetchForecast(currentLocation, isZipCode);
            }
        });
    }

    // Show error message
    function showError(message) {
        if (!message) {
            if (errorMessage) {
                errorMessage.textContent = '';
                errorMessage.style.display = 'none';
            }
            return;
        }
        
        console.error('Showing error:', message);
        
        if (errorMessage) {
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
            
            // Hide error after 5 seconds
            setTimeout(() => {
                errorMessage.style.display = 'none';
            }, 5000);
        }
    }

    // Load weather history
    async function loadWeatherHistory() {
        try {
            const response = await fetch('/api/weather/history');
            const data = await response.json();
            
            if (data.status === 'success' && data.data.length > 0) {
                renderWeatherHistory(data.data);
            } else {
                showNoHistory();
            }
        } catch (error) {
            console.error('Error loading history:', error);
            showNoHistory();
        }
    }

    // Render weather history
    function renderWeatherHistory(history) {
        if (!weatherHistory) return;
        
        weatherHistory.innerHTML = '';
        
        history.forEach(item => {
            const date = new Date(item.timestamp);
            const timeString = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            const historyItem = document.createElement('a');
            historyItem.href = '#';
            historyItem.className = 'list-group-item list-group-item-action';
            historyItem.innerHTML = `
                <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1">${item.location || 'Unknown Location'}</h5>
                    <small>${timeString}</small>
                </div>
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <span class="h4 mb-0">${item.temperature ? Math.round(item.temperature) + '°F' : 'N/A'}</span>
                        <small class="text-muted ms-2">${item.description || ''}</small>
                    </div>
                    ${item.icon ? `<img src="http://openweathermap.org/img/wn/${item.icon}.png" alt="${item.description || ''}" class="weather-history-icon">` : ''}
                </div>`;
            
            // Add click event to search for this location again
            historyItem.addEventListener('click', (e) => {
                e.preventDefault();
                if (item.location) {
                    cityInput.value = item.location.split(',')[0].trim();
                    weatherForm.dispatchEvent(new Event('submit'));
                }
            });
            
            weatherHistory.appendChild(historyItem);
        });
        
        if (noHistory) noHistory.classList.add('d-none');
    }

    // Show no history message
    function showNoHistory() {
        if (weatherHistory) weatherHistory.innerHTML = '';
        if (noHistory) noHistory.classList.remove('d-none');
    }

    // Show/hide loading spinner
    function showLoading(show) {
        const submitBtn = weatherForm ? weatherForm.querySelector('button[type="submit"]') : null;
        
        if (submitBtn) {
            if (show) {
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...';
            } else {
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="bi bi-search"></i> Get Weather';
            }
        }
        
        // Also show/hide the main loading spinner
        if (loadingSpinner) {
            loadingSpinner.style.display = show ? 'block' : 'none';
        }
    }
});
